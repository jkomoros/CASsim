//This file was generated by `npm run generate:types`

export type DisplayValue = {
	//If true, then the SVG will render debug information
	debug?: boolean;
	//If true, then each individuals' beliefs about the value of a project will be rendered as a tick mark
	disableBeliefs?: boolean;
	//If true, then the line connecting each collaborator to the project they pick won't be rendered
	disableSelection?: boolean;
};

export type CommunicationStrategy = 'random' | 'min' | 'max' | 'disagreement';

type CollaboratorIndividualOptions = {
	//The starter beliefs of this individual of the values of projects. Must be an array of the same length as number of projects
	beliefs?: number[];
	//The epsilon for this specific individual
	epsilon?: number;
	//The specific emoji
	emoji?: string;
	//avgConnectionLikelihood for this individual
	avgConnectionLikelihood?: number;
	//connectionLikelihoodSpread for this individual
	connectionLikelihoodSpread?: number;
	//When this person speaks to another person, how much does the receiver update their beliefs? 0.5 means the receiver would move their belief to be halfway between their previous belief and the speaker's belief
	compelling?: number;
	//For each time a speaker is selected to present, how likely are they are they to broadcast to multiple people, with any individual with a connection equal to or stronger than the selected connection is communicated with at once?
	broadcastLikelihood?: number;
	//How optimistic or pessimistic the individual is. 1.0 is extremely optimistic--every value will be at the top of the possible range. 0.0 is extremely pessimistic--every value will be at the bottom of the possible range.
	optimism?: number;
	//Whether this person believes in the north star or not. If they don't believe then they will not be influenced by the effect.
	believes?: boolean;
	//The communication strategy the individual will use when deciding which project to communicate about
	communicationStrategy?: 'random' | 'min' | 'max' | 'disagreement';
};

type ProjectIndividualOptions = {
	//A marked project shows up distinctively; collaborators, when deciding between two projects that look like the same value, will prefer the marked one.
	marked?: boolean;
	//Each project will get between 0.0 and this number randomly set on top of 1.0 for the value
	maxExtraValue?: number;
	//Each project will get between 0.0 and this number randomly set, which are the "error bars" for the value; its value is considered by collaborators to be somewhere within those values.
	maxErrorValue?: number;
	//After a value is set for each project, twiddle it up or down by a random amount beteen 0.0 and this number.
	twiddleValueAmount?: number;
	//Value is the height of the project, in units of 1.0 = width
	value?: number;
	//The error bars for this value; collaborators will consider the true value to be somewhere within value +/- this value
	error?: number;
};

export type NorthStarOptions = {
	//The emoji to render for the north star
	emoji?: string;
	offsetType?: 'manual' | 'random' | 'random-project';
	//The lowest random offset to choose if offsetType is randomly selected
	minOffset?: number;
	//The highest random offset to choose if offsetType is randomly selected
	maxOffset?: number;
	//How far from fully at left to fully at right is the northstar? This value will be used directly if offsetType is manual, otherwise it will be set implicitly.
	offset?: number;
	//How strong is the north star effect?
	strength?: number;
	//How wide is the positive effect of the northstar affect (trading off linearly from the offset position to plus or minus by this amount)
	spread?: number;
	//The proportion of collaborators who will believe in this north star (will have their believes set to true).
	believability?: number;
};

export type SchellingOrgSimOptions = {
	//An optional object that controls how things render. If not provided, will be interpreted as though it enables no optional rendering.
	display?: DisplayValue;
	//How many rounds of communication should be allowed between agents before they decide. 0 is no communication and will render a line of collaborators with walls between them.
	communication?: number;
	//Information on the collaborators
	collaborators?: {
		//How many collaborators there should be
		count: number;
		//Project values within this amount of each other will be considered to be the same
		epsilon?: number;
		//We compute a range of possible connection likelihoods based on [avgConnectionLikelihood - connectionLikelihoodSpread, avgConnectionLikelihood + connectionLikelihoodSpread] Numbers below 0.0 or 1.0 will be clipped, which is a convenient way of making a lot of them drop out or be maximum strength.
		avgConnectionLikelihood?: number;
		//We compute a range of possible connection likelihoods based on [avgConnectionLikelihood - connectionLikelihoodSpread, avgConnectionLikelihood + connectionLikelihoodSpread] Numbers below 0.0 or 1.0 will be clipped, which is a convenient way of making a lot of them drop out or be maximum strength.
		connectionLikelihoodSpread?: number;
		//When each individual speaks to another, how much does the receiver update their beliefs, between their old belief and new belief? 0.5 would be moving halfway from old belief to new belief
		compelling?: number;
		//For each time a speaker is selected to present, how likely are they are they to broadcast to multiple people, with any individual with a connection equal to or stronger than the selected connection is communicated with at once?
		broadcastLikelihood?: number;
		//How optimistic or pessimistic the individual is. 1.0 is extremely optimistic--every value will be at the top of the possible range. 0.0 is extremely pessimistic--every value will be at the bottom of the possible range.
		optimism?: number;
		//The communication strategy the individual will use when deciding which project to communicate about
		communicationStrategy?: CommunicationStrategy;
		//If set, then the individuals array will be set so that a random individual has this configuration provided
		randomIndividual?: CollaboratorIndividualOptions;
		//individuals is set to override the computed individuals with the given properties. null values will be ignored, and keys not in the override will be left in place.
		individuals?: (CollaboratorIndividualOptions | null)[];
	};
	//Information on projects
	projects?: {
		//How many projects there are
		count: number;
		//Each project will get between 0.0 and this number randomly set on top of 1.0 for the value
		maxExtraValue?: number;
		//Each project will get between 0.0 and this number randomly set, which are the "error bars" for the value; its value is considered by collaborators to be somewhere within those values.
		maxErrorValue?: number;
		//After a value is set for each project, twiddle it up or down by a random amount beteen 0.0 and this number.
		twiddleValueAmount?: number;
		//If provided, each run the individuals overrides will have a random individual provided precisely these overrides
		randomIndividual?: ProjectIndividualOptions;
		//individuals is set to override the computed individuals with the given properties. null values will be ignored, and keys not in the override will be left in place.
		individuals?: (ProjectIndividualOptions | null)[];
	};
	//Information on an (optional) north star, which people will tend to pick towards
	northStar?: NorthStarOptions;
};