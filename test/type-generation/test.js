/*eslint-env node*/

import {
	simulatorTypeFileContents
} from '../../tools/types.js';

import assert from 'assert';

const DEMO_SIMULATOR_NAME = 'demo-simulator';
const DEMO_SIMULATOR_FILENAME = 'src/simulators/demo-simulator.js';
const DEMO_SIMULATOR_NAME_CAMEL_CASED = 'DemoSimulator';

describe('simulatorTypeFileContents', () => {
	it('basic result', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: true
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar: boolean;
};`;
		assert.deepStrictEqual(result, golden);
	});

	it('basic result options', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: 'a',
				options: [
					{
						value: 'a',
					},
					{
						value: 'b',
					}
				]
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar: 'a' | 'b';
};`;
		assert.deepStrictEqual(result, golden);
	});

	it('basic result nested', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: {
					baz: {
						example: 3,
					},
					buz: {
						example: 'bam',
						optional: true
					}
				},
				optional: true
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar?: {
		baz: number;
		buz?: string;
	};
};`;
		assert.deepStrictEqual(result, golden);
	});

	it('basic result with import', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: true,
				typeInfo: {
					typeName: 'DistributionOptions',
					import: 'src/types.js'
				}
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

import {
	DistributionOptions
} from '../types.js';

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar: DistributionOptions;
};`;

		assert.deepStrictEqual(result, golden);
	});

	it('basic result with 2 imports from one file', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
				typeInfo: {
					typeName: 'OtherThing',
					import: 'src/types.js'
				}
			},
			bar: {
				example: true,
				typeInfo: {
					typeName: 'DistributionOptions',
					import: 'src/types.js'
				}
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

import {
	OtherThing,
	DistributionOptions
} from '../types.js';

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: OtherThing;
	bar: DistributionOptions;
};`;

		assert.deepStrictEqual(result, golden);
	});
});