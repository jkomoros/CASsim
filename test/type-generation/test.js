/*eslint-env node*/

import {
	simulatorTypeFileContents
} from '../../tools/types.js';

import assert from 'assert';

const DEMO_SIMULATOR_NAME = 'demo-simulator';
const DEMO_SIMULATOR_FILENAME = 'src/simulators/demo-simulator.js';
const DEMO_SIMULATOR_NAME_CAMEL_CASED = 'DemoSimulator';

describe('simulatorTypeFileContents', () => {
	it('basic result', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: true
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar: boolean;
};`;
		assert.deepStrictEqual(result, golden);
	});

	it('basic result options', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: 'a',
				options: [
					{
						value: 'a',
					},
					{
						value: 'b',
					}
				]
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar: 'a' | 'b';
};`;
		assert.deepStrictEqual(result, golden);
	});

	it('basic result array', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: [
					{
						example: 5,
					}
				]
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar: number[];
};`;
		assert.deepStrictEqual(result, golden);
	});

	it('basic result array optional item', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: [
					{
						example: 5,
						optional: true,
					}
				]
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar: (number | null)[];
};`;
		assert.deepStrictEqual(result, golden);
	});

	it('basic result nested', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: {
					baz: {
						example: 3,
					},
					buz: {
						example: 'bam',
						optional: true
					}
				},
				optional: true
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar?: {
		baz: number;
		buz?: string;
	};
};`;
		assert.deepStrictEqual(result, golden);
	});

	it('basic result array nested optional item', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: [
					{
						example: {
							foo: {
								example: 5,
							}
						},
						optional: true,
					}
				]
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar: ({
		foo: number;
	} | null)[];
};`;
		assert.deepStrictEqual(result, golden);
	});

	it('basic result with import', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: true,
				typeInfo: {
					typeName: 'DistributionOptions',
					import: 'src/types.js'
				}
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

import {
	DistributionOptions
} from '../types.js';

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar: DistributionOptions;
};`;

		assert.deepStrictEqual(result, golden);
	});

	it('basic result with two things importing same identifier', async () => {
		const input = {
			foo: {
				example: true,
				optional: true,
				typeInfo: {
					typeName: 'DistributionOptions',
					import: 'src/types.js'
				}
			},
			bar: {
				example: true,
				typeInfo: {
					typeName: 'DistributionOptions',
					import: 'src/types.js'
				}
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

import {
	DistributionOptions
} from '../types.js';

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: DistributionOptions;
	bar: DistributionOptions;
};`;

		assert.deepStrictEqual(result, golden);
	});

	it('basic result with 2 imports from one file', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
				typeInfo: {
					typeName: 'OtherThing',
					import: 'src/types.js'
				}
			},
			bar: {
				example: true,
				typeInfo: {
					typeName: 'DistributionOptions',
					import: 'src/types.js'
				}
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

import {
	OtherThing,
	DistributionOptions
} from '../types.js';

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: OtherThing;
	bar: DistributionOptions;
};`;

		assert.deepStrictEqual(result, golden);
	});

	it('basic result extracted sub-type object', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: {
					baz: {
						example: 3,
						description: 'A baz'
					},
					buz: {
						example: {
							foo: {
								example: 3,
							},
							bar: {
								example: true,
								description: 'Bar yup'
							}
						},
						description: 'A buz',
						optional: true
					}
				},
				typeInfo: {
					typeName: 'ExtractedBazBuz'
				},
				optional: true
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

type ExtractedBazBuz = {
	//A baz
	baz: number;
	//A buz
	buz?: {
		foo: number;
		//Bar yup
		bar: boolean;
	};
};

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar?: ExtractedBazBuz;
};`;
		assert.deepStrictEqual(result, golden);
	});

	it('basic result extracted sub-type enum', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: 'a',
				options: [
					{
						value: 'a'
					},
					{
						value: 'b'
					},
					{
						value: 'c'
					}
				],
				typeInfo: {
					typeName: 'ExtractedBazBuz'
				},
				optional: true
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

type ExtractedBazBuz = 'a' | 'b' | 'c';

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar?: ExtractedBazBuz;
};`;
		assert.deepStrictEqual(result, golden);
	});

	it('basic result extracted sub-type array', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: [
					{
						typeInfo: {
							typeName: 'ExtractedBazBuz'
						},
						optional: true,
						example: {
							baz: {
								example: 3,
								description: 'A baz'
							},
							buz: {
								example: {
									foo: {
										example: 3,
									},
									bar: {
										example: true,
										description: 'Bar yup'
									}
								},
								description: 'A buz',
								optional: true
							}
						}
					}
				],
				optional: true
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

type ExtractedBazBuz = {
	//A baz
	baz: number;
	//A buz
	buz?: {
		foo: number;
		//Bar yup
		bar: boolean;
	};
};

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar?: (ExtractedBazBuz | null)[];
};`;
		assert.deepStrictEqual(result, golden);
	});

	it('basic result double-extracted sub-type', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
			},
			bar: {
				example: {
					baz: {
						example: 3,
						description: 'A baz'
					},
					buz: {
						example: {
							foo: {
								example: 3,
							},
							bar: {
								example: true,
								description: 'Bar yup'
							}
						},
						description: 'A buz',
						optional: true,
						typeInfo: {
							typeName: 'ExtractedBuz'
						}
					}
				},
				typeInfo: {
					typeName: 'ExtractedBazBuz'
				},
				optional: true
			}
		};
		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

type ExtractedBuz = {
	foo: number;
	//Bar yup
	bar: boolean;
};

type ExtractedBazBuz = {
	//A baz
	baz: number;
	//A buz
	buz?: ExtractedBuz;
};

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: number;
	bar?: ExtractedBazBuz;
};`;
		assert.deepStrictEqual(result, golden);
	});

	it('basic result extracted sub-type duplicate name different definitions', async () => {
		const input = {
			foo: {
				example: 3,
				optional: true,
				typeInfo: {
					typeName: 'ExtractedBazBuz'
				}
			},
			bar: {
				example: {
					baz: {
						example: 3,
						description: 'A baz'
					},
					buz: {
						example: true
					}
				},
				typeInfo: {
					typeName: 'ExtractedBazBuz'
				},
				optional: true
			}
		};

		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

type ExtractedBazBuz = number | {
	//A baz
	baz: number;
	buz: boolean;
};

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: ExtractedBazBuz;
	bar?: ExtractedBazBuz;
};`;
		assert.deepStrictEqual(result, golden);

	});

	it('basic result extracted sub-type duplicate name same definition', async () => {
		const input = {
			foo: {
				example: {
					baz: {
						example: 3,
						description: 'A baz'
					},
					buz: {
						example: true
					}
				},
				optional: true,
				typeInfo: {
					typeName: 'ExtractedBazBuz',
					exported: true
				}
			},
			bar: {
				example: {
					baz: {
						example: 3,
						description: 'A baz'
					},
					buz: {
						example: true
					}
				},
				typeInfo: {
					typeName: 'ExtractedBazBuz'
				},
				optional: true
			}
		};

		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

export type ExtractedBazBuz = {
	//A baz
	baz: number;
	buz: boolean;
};

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: ExtractedBazBuz;
	bar?: ExtractedBazBuz;
};`;
		assert.deepStrictEqual(result, golden);

	});

	it('basic result extracted sub-type duplicate name similar definitions', async () => {
		const input = {
			foo: {
				example: {
					baz: {
						example: 4,
					},
					buz: {
						example: false,
						description: 'A buz',
						optional: true
					}
				},
				optional: true,
				typeInfo: {
					typeName: 'ExtractedBazBuz'
				}
			},
			bar: {
				example: {
					baz: {
						example: 3,
						description: 'A baz'
					},
					buz: {
						example: true
					}
				},
				typeInfo: {
					typeName: 'ExtractedBazBuz'
				},
				optional: true
			}
		};

		const result = simulatorTypeFileContents(DEMO_SIMULATOR_NAME, input, DEMO_SIMULATOR_FILENAME);
		const golden = `//This file was generated by \`npm run generate:types\`

type ExtractedBazBuz = {
	//A baz
	baz: number;
	//A buz
	buz?: boolean;
};

export type ${DEMO_SIMULATOR_NAME_CAMEL_CASED}SimOptions = {
	foo?: ExtractedBazBuz;
	bar?: ExtractedBazBuz;
};`;
		assert.deepStrictEqual(result, golden);

	});

});